
#include "SPI.h"
#include "SD.h"
#include <esp_now.h>
#include <WiFi.h>
#include <Wire.h>
#include "TFT_eSPI.h"
#include <TJpg_Decoder.h>
#include "types.h"
#include <FS.h>
#include "SPIFFS.h" 
#include  <math.h>
#include <stdio.h>
#include "TinyGPS++.h";
#include "HardwareSerial.h";

TinyGPSPlus gps;
HardwareSerial SerialGPS(1);

TFT_eSPI tft = TFT_eSPI();

bool tft_output(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t* bitmap)
{
  if ( y >= tft.height() ) return 0;
  tft.pushImage(x, y, w, h, bitmap);
  return 1;
}


#define FS_NO_GLOBALS
#define SD_CS 5
#define RED 0xF800
#define GREEN 0x07E0

int x_tile, y_tile, x_pix, y_pix, xx_tile, 
    yy_tile, xx_pix, yy_pix, len, x, xx,
    y, yy;
    
float glob_x, glob_y, glob_xx, glob_yy;
double dlong, dlat;
char zoomBuffer[10];
int zoomLevel = 18;
const uint8_t * mac;
const uint8_t *incomingData;
//int len;
const String Ext = ".jpeg";
const String Slash = "/";
const long buttonInterval = 500; 
const int maxZoomLevel = 17;
const int minZoomLevel = 15;
String readlong;
String readlat;
String mapFile;
String xname = "";
String yname= "";
//int x;
//int y;
float locallat;
float locallon;
float lat;
float lon;
int mapHeight = 320;
int mapWidth = 480;

TaskHandle_t Task1;


//Structure to receive data
//Over ESP-NOW
typedef struct test_struct {
  char x[10];
  char y[10];

} test_struct;

//Create a struct_message called myData
test_struct myData;

//callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {

    // ESP-Now on recieve get out my lat long
    x = NULL;
    y = NULL;
    memcpy(&myData, incomingData, sizeof(myData));
    Serial.print("Bytes received: ");
    Serial.println(len);
    Serial.print("x: ");
    Serial.println(myData.x);
    String readStringlat(myData.x);
    readlat = readStringlat;
    Serial.print("y: ");
    Serial.println(myData.y);
    String readStringlong(myData.y);
    readlong = readStringlong;
    Serial.println();
    mapFile = "";
    lat = readlat.toFloat();
    lon = readlong.toFloat();
    //float dlat = readlat.toFloat();
    //float dlong = readlong.toFloat();
    //doit();
    localpositioncalc();
    main();
    
}

void setup() {


    //Initialize Serial Monitor
    Serial.begin(115200);

    xTaskCreatePinnedToCore(
    Task1code, /* Function to implement the task */
    "Task1", /* Name of the task */
    10000,  /* Stack size in words */
    NULL,  /* Task input parameter */
    0,  /* Priority of the task */
    &Task1,  /* Task handle. */
    0); /* Core where the task should run */


    SerialGPS.begin(9600, SERIAL_8N1, 17, 16);
    
    //Set device as a Wi-Fi Station
    WiFi.mode(WIFI_STA);

    //Init ESP-NOW
    if (esp_now_init() != ESP_OK) {
        Serial.println("Error initializing ESP-NOW");
        return;
    }
    // Once ESPNow is successfully Init, register for recv CB to
    // get recv packer info
    esp_now_register_recv_cb(OnDataRecv);

    // Initialise SD before TFT
    if (!SD.begin(SD_CS)) {
      Serial.println(F("SD.begin failed!"));
      while (1) delay(0);
    }
    Serial.println("\r\n SD Initialisation done.");

// Initialise tft screen
    tft.begin();
    tft.setRotation(3);
    tft.setTextColor(0xFFFF, 0x0000);
    tft.fillScreen(TFT_BLACK);
    tft.setSwapBytes(true); // We need to swap the colour bytes (endianess)
    // The jpeg image can be scaled by a factor of 1, 2, 4, or 8
    TJpgDec.setJpgScale(1);
    // The decoder must be given the exact name of the rendering function above
    TJpgDec.setCallback(tft_output);

    initScreen();
 
}


void loop() {

     

  
}

void Task1code( void * parameter) {
  for(;;) {
    while (SerialGPS.available() >0) {
      gps.encode(SerialGPS.read());
    }
    delay(500);
    locallat = gps.location.lat();
    locallon = gps.location.lng();
    Serial.print("locallat = ");
    Serial.println(locallat); 

  }
}
void initScreen(){
    //Serial.print("the wait screen is running on Core: ");
    //Serial.println(xPortGetCoreID());
    // Inital boot screen with image             
    tft.fillScreen(TFT_WHITE);
    tft.setTextSize(1);
    tft.setTextColor(TFT_RED, TFT_WHITE);
    tft.setTextDatum(TC_DATUM);
    TJpgDec.drawSdJpg(0, 0, "/Intro.jpeg");
    tft.drawString("Waiting for GPS...", 100, 60, 4);
    
}


void smoothscreen(){
   // Serial.print("the map screen is running on Core: ");
    //Serial.println(xPortGetCoreID());  
    // Display map tile and plot x,y on screen
    
    TJpgDec.drawSdJpg(0, 0, mapFile);
    tft.fillCircle(x_pix, y_pix, 5, RED);
    tft.fillCircle(xx_pix, yy_pix, 5, GREEN);
    delay(10000);
}


float inv_gudermannian(float y) {
    return log(tan((y + M_PI_2) / 2));
}

void get_lat_lng_tile(float lat, float lon, float *x, float *y, int zoomLevel){

     float lat_rad = lat * M_PI / 180.0;
    lat_rad = inv_gudermannian(lat_rad);
    *x = pow(2, zoomLevel) * (lon + 180.0) / 360.0;
    *y = pow(2, zoomLevel) * (M_PI - lat_rad) / (M_PI * 2);

}


void get_coords(float glob_x, float glob_y, int x_width, int y_width, int *x_tile, int *y_tile, int *x_pixel, int *y_pixel) {
    // assume glob_x = 1.2, glob_y = 2.5
   // Serial.print("the LAT/LONG calculation is running on Core: ");
    //Serial.println(xPortGetCoreID());    
    float x_tile_f = floor(glob_x);  // 1.0
    float y_tile_f = floor(glob_y); // 2.0

    
    *x_tile = (int) x_tile_f; // 1
    *y_tile = (int) y_tile_f; // 2
    xname = String((int)x_tile_f);
    yname = String((int)y_tile_f);
    String MapName = "";
    MapName = Slash + xname + yname + Ext;
    mapFile = MapName;
    
    // Look at tile (1,2)
    float x_frac = glob_x - x_tile_f; //.2
    float y_frac = glob_y - y_tile_f; //.5
    *x_pixel = (int) (((float) x_width) * x_frac); // x_width = 200px -> 200px * 0.2 = 40px
    *y_pixel = (int) (((float) y_width) * y_frac); // x_width = 200px -> 200px * 0.2 = 40px

}

int main(){

    //Serial.print("main is running on Core: ");
   // Serial.println(xPortGetCoreID());
    //  calculate tile number from lat long and write to mapFile    
    get_lat_lng_tile(lat, lon, &glob_x, &glob_y, zoomLevel);
    get_coords(glob_x, glob_y, mapWidth, mapHeight, &x_tile, &y_tile, &x_pix, &y_pix);
    smoothscreen();
   return 0;
}

// Local gps calculation instance below

float localinv_gudermannian(float yy) {
    return log(tan((yy + M_PI_2) / 2));
}


void get_local_lat_lng_tile(float locallat, float locallon, float *xx, float *yy, int zoomLevel){

     float locallat_rad = locallat * M_PI / 180.0;
    locallat_rad = localinv_gudermannian(locallat_rad);
    *xx = pow(2, zoomLevel) * (locallon + 180.0) / 360.0;
    *yy = pow(2, zoomLevel) * (M_PI - locallat_rad) / (M_PI * 2);

}


void get_local_coords(float glob_xx, float glob_yy, int x_width, int y_width, int *xx_tile, int *yy_tile, int *xx_pixel, int *yy_pixel) {
    // assume glob_xx = 1.2, glob_yy = 2.5
    Serial.print("the LAT/LONG calculation is running on Core: ");
    Serial.println(xPortGetCoreID());    
    float xx_tile_f = floor(glob_xx);  // 1.0
    float yy_tile_f = floor(glob_yy); // 2.0

    
    *xx_tile = (int) xx_tile_f; // 1
    *yy_tile = (int) yy_tile_f; // 2

    
    // Look at tile (1,2)
    float xx_frac = glob_xx - xx_tile_f; //.2
    float yy_frac = glob_yy - yy_tile_f; //.5
    *xx_pixel = (int) (((float) x_width) * xx_frac); // x_width = 200px -> 200px * 0.2 = 40px
    *yy_pixel = (int) (((float) y_width) * yy_frac); // x_width = 200px -> 200px * 0.2 = 40px

}

int localpositioncalc(){

    Serial.print("localpositioncalc is running on Core: ");
    Serial.println(xPortGetCoreID());
    //  calculate tile number from lat long and write to mapFile    
    get_local_lat_lng_tile(locallat, locallon, &glob_xx, &glob_yy, zoomLevel);
    get_local_coords(glob_xx, glob_yy, mapWidth, mapHeight, &xx_tile, &yy_tile, &xx_pix, &yy_pix);
    return 0;
}
