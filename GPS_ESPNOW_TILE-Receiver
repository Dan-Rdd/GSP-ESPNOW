#include <esp_now.h>
#include <WiFi.h>
#include <Wire.h>
#include "TFT_eSPI.h"
#include <TJpg_Decoder.h>
#define FS_NO_GLOBALS
#include <FS.h>
#include "SPIFFS.h" // Required for ESP32 only

TFT_eSPI tft = TFT_eSPI();

bool tft_output(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t* bitmap)
{
  if ( y >= tft.height() ) return 0;
  tft.pushImage(x, y, w, h, bitmap);
  return 1;
}


#define ss 5
#define rst 34
#define dio0 35

double dlong, dlat;
char zoomBuffer[10];
int zoomLevel = 19;
char la[9];
char lo[9];
const long buttonInterval = 500; 
const int maxZoomLevel = 17;
const int minZoomLevel = 15;
const int width = 256;
String readStringlong;
String readStringlat;
String mapFile;
String MapName;

//Structure example to receive data
//Must match the sender structure
typedef struct test_struct {
  char x[10];
  char y[10];
  //int x;
  //double y;
} test_struct;

//Create a struct_message called myData
test_struct myData;

//callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
    
    memcpy(&myData, incomingData, sizeof(myData));
    Serial.print("Bytes received: ");
    Serial.println(len);
    Serial.print("x: ");
    Serial.println(myData.x);
    String readStringlat(myData.x);
    Serial.print("y: ");
    Serial.println(myData.y);
    String readStringlong(myData.y);
    Serial.println();
    double dlat = readStringlat.toFloat();
    double dlong = readStringlong.toFloat();
    double genx = long2tilex(dlong,zoomLevel);
    double geny = lat2tiley(dlat,zoomLevel);
    dtostrf(genx, 5, 0, lo);
    dtostrf(geny, 5, 0, la);
    String xx = lo;
    String yy = la;
    String ext = ".jpeg";
    String slash = "/";
    String MapName = slash + xx + yy + ext;
    Serial.print("New map generated: ");
    Serial.println(MapName);
    mapFile = MapName;

}

void setup() {
  //Initialize Serial Monitor
  Serial.begin(115200);
  
  //Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  //Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_register_recv_cb(OnDataRecv);
  //======================================================================================
// Initialise SPIFFS
//-------------------------------------------------------------------------------------
  if (!SPIFFS.begin()) {
    Serial.println("SPIFFS initialisation failed!");
    while (1) yield(); // Stay here twiddling thumbs waiting
  }
  Serial.println("\r\nInitialisation done.");
//======================================================================================
// Initialise tft screen
//-------------------------------------------------------------------------------------  
  tft.begin();
  tft.setRotation(3);
  tft.setTextColor(0xFFFF, 0x0000);
  tft.fillScreen(TFT_BLACK);
  tft.setSwapBytes(true); // We need to swap the colour bytes (endianess)
  // The jpeg image can be scaled by a factor of 1, 2, 4, or 8
  TJpgDec.setJpgScale(1);
  // The decoder must be given the exact name of the rendering function above
  TJpgDec.setCallback(tft_output);

  initScreen();
 
}
 
void loop() {
  
   smoothscreen();

}

int long2tilex(double lon, int z){ 
  return (int)(floor((lon + 180.0) / 360.0 * (1 << z))); 
}
    
int lat2tiley(double lat, int z){ 
    double latrad = lat * M_PI/180.0;
  return (int)(floor((1.0 - asinh(tan(latrad)) / M_PI) / 2.0 * (1 << z))); 
}

void initScreen(){
  tft.fillScreen(TFT_WHITE);
  tft.setTextSize(1);
  tft.setTextColor(TFT_RED, TFT_WHITE);
  tft.setTextDatum(TC_DATUM);
  tft.drawString("Waiting for GPS...", 240, 140, 4);
}

void smoothscreen(){
      

      TJpgDec.drawFsJpg(0, 0, mapFile);
      delay(10000);
}

